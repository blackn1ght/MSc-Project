group hydrological 'erosion', 'run-off or flooding', 'minimal or no effect' .
group energy_production 'low', 'medium', 'high' .
group visual_impact 'close', 'fairly distant',  'very distant' .
group sound_impact 'loud', 'quiet' .
group geological_survey 'stable', 'partly stable', 'unstable' .

% Setup - ensures that result is 'none' by default
rule setup
	if 1=1
	then result becomes 'none'
	and second_best becomes 'false' .

% ------ START RULES AND QUESTIONS ------

rule q_test1
	if test1 is unknown
	then ask test1 .

question test1
	What is the outcome of the hydrological survey? ;
	choose from the hydrological .

rule hydrological_outcome_errosion
	if test1 is 'erosion'
	then result becomes 'reject'
	and reason becomes 'completely unsuitable due to likelihood of land erosion.' .

rule hydrological_outcome_runoff
	if test1 is 'run-off or flooding'
	then result becomes 'reject'
	and reason becomes 'completely unsuitable due to risk of flooding.' .



rule q_test2
	if test2 is unknown
	and result is 'none'
	then write('asking test2 from q_test2.') and nl
	and ask test2 .

question test2
	What is the energy production? ;
	choose from the energy_production .

rule energy_production_outcome_low
	if result is 'none'
	and test2 is 'low'
	then result becomes 'reject'
	and reason becomes 'completely unsuitable due to the project not being profitable.' .

% THIS NEEDS TO BE LOOKED AT, NO IDEA WHAT TO DO
rule energy_production_outcome_medium
	if result is 'none'
	and test2 is 'medium'
	then result becomes 'none'
	and second_best becomes 'true'
	and reason becomes 'second best result.' .




rule q_test3
	if result is 'none'
	and test3_endangered is unknown
	and test3_scarce is unknown
	and test3_common is unknown
	then write('asking test3 from q_test3.') and nl
	and ask test3_endangered
	and ask test3_scarce
	and ask test3_common .

question test3_endangered
	How many distinct species are endangered? ;
	input number ;
	because Enter how many distinct species are endangered, it will help figure out how suitable the site is to the wildlife .

question test3_scarce
	How many distinct species are scarce? ;
	input number ;
	because Enter how many distinct species are scarce, it will help figure out how suitable the site is to the wildlife .

question test3_common
	How many distinct species are common? ;
	input number ;
	because Enter how many distinct species are common, it will help figure out how suitable the site is to the wildlife .

/*
question test3
	What is the wildlife score? ;
	input number .
*/

rule wildlife_score
	if result is 'none'
	and test3_endangered is not unknown
	and test3_scarce is not unknown
	and test3_common is not unknown
	then endangered_score becomes test3_endangered * 3
	and scarce_score becomes test3_scarce * 2
	and common_score becomes test3_common * 1
	and wildlife becomes endangered_score + scarce_score + common_score
	and write('wildlife score: ') and write (wildlife) and nl .
	

% Test3 --(x < 10)--> rejection
rule wildlife_score_low
	if result is 'none'
	and wildlife is not unknown
	and wildlife =< 10
	then result becomes 'reject'
	and reason becomes 'completely unsuitable due to wildlife impact.' .



% This will ask the question to gather the data, regardless of what's called it.  That is managed after. %
rule q_test4
	if result is 'none'
	and test4 is unknown
	and [ wildlife > 10 
	and wildlife < 20
	or wildlife > 20 ]
	then  write('asking test4 from q_test4.') and nl
	and ask test4 .

question test4
	What is the visual impact? ;
	choose from the visual_impact .



rule q_test5_1
	if result is 'none'
	and test5 is unknown
	and test6 is unknown	% tries to prevent the question from firing at the end
	and wildlife > 20
	and test4 is 'close'
	then write('asking test5 from q_test5_1.') and nl
	and ask test5 .

rule q_test5_2
	if result is 'none'
	and test5 is unknown
	and test6 is unknown	% tries to prevent the question from firing at the end
	and wildlife > 10 and wildlife < 20
	and test4 is 'very distant'
	then write('asking test5 from q_test5_2.') and nl
	and ask test5 .

rule q_test6_1
	if result is 'none'
	and test6 is unknown
	and wildlife > 20
	and [ test4 is 'very distant'
	or test4 is 'fairly distant' ]
	then write('asking test6 from q_test6_1.') and nl
	and ask test6 .

rule q_test6_2
	if result is 'none'
	and test6 is unknown
	and wildlife > 10 and wildlife < 20
	and test4 is not 'very distant'
	then write('asking test6 from q_test6_2.') and nl
	and ask test6 .

question test5
	What is the sound impact? ;
	choose from the sound_impact .


% Outputs the loud outcome (rejection)
% Test3 --(10 < x < 20)--> Test4 --(very distant)--> Test5
% Test3 --(x > 20)--> Test4 --(close)--> Test5
rule test5_loud
	if result is 'none'
	and test5 is not unknown
	and test5 is 'loud'
	then result becomes 'reject'
	and reason becomes 'completely unsuitable due to sound impact on population.' .


rule q_test6
	if result is 'none'
	and test6 is unknown
	then write('asking test6 from q_test6.') and nl
	and ask test6 .

question test6
	What is the outcome of the geological survey? ;
	choose from geological_survey .

% The outcomes of test 6.  
% Test3 --(At Least 20)--> Test4 --(very distant)--> Test6
rule test6_stable
	if result is 'none'
	and wildlife > 20
	and test4 is 'very distant'
	and test6 is 'stable'
	and second_best is 'false'
	then result becomes 'success'
	and reason becomes 'an ideal location.  Start building it now.' .

rule test6_stable_2ndbest
	if result is 'none'
	and wildlife > 20
	and test4 is 'very distant'
	and test6 is 'stable'
	and second_best is 'true'
	then result becomes 'success'
	and reason becomes ' Second best solution, due to not mediocre energy production.' .

% Land was partly stable.
% Test3 --(At Least 20)--> Test4 --(close)--> Test5 --(quiet)--> Test6 --(stable)-->
% Test3 --(At Least 20)--> Test4 --(close)--> Test5 --(quiet)--> Test6 --(partly stable)-->  
% Test3 --(At Least 20)--> Test4 --(very distant)--> Test6 --(partly stable)-->
% Test3 --(At Least 20)--> Test4 --(fairly distant)--> Test6 --(stable)-->
% Test3 --(At Least 20)--> Test4 --(fairly distant)--> Test6 --(partly stable)-->
rule test6_partly
	if result is 'none'
	and wildlife > 20

	and [[test4 is 'very distant'
	and test6 is 'partly stable']
	or [test4 is 'fairly distant'
	and test6 is not 'unstable']
	or [test4 is 'close'
	and test5 is not unknown
	and test5 is 'quiet'
	and test6 is not 'unstable']]

	then result becomes 'success'
	and reason becomes 'accept as 2nd best quality location.  Stabilize the land if necessary.' .

% Land is stable or partly unstable - 2nd best solution.
% Test3 --(10 < x < 20)--> Test4 --(other cases)--> Test6 --(stable or partly stable)-->
% Test3 --(10 < x < 20)--> Test4 --(very distant)--> Test5 --(quiet)--> Test6 --(stable or partly stable)-->
rule test6_2ndbest
	if result is 'none'
	and wildlife > 10
	and wildlife < 20

	and [[test4 is not 'very distant'
	and test6 is not 'unstable']
	or [test4 is 'very distant'
	and test5 is not unknown
	and test5 is 'quiet'
	and test6 is not 'unstable']]

	then result becomes 'success'
	and reason becomes 'accept as second best quality location - stablize the land and/ore create an alternative wildlife habitat if necessary.' .

% Land was unstable.
% Test3 --(At Least 20)--> Test4 --(fairly distant)--> Test6
% Test3 --(10 < x < 20)--> Test4 --(other cases)--> Test 6
% Test3 --(10 < x < 20)--> Test4 --(very distant)--> Test5 --(quiet)--> Test6
rule test6_unstable
	if result is 'none'
	and test6 is 'unstable'
	then result becomes 'reject'
	and reason becomes 'completely unsuitable due to unstable ground.' .


% By the time the engine gets here, a result will have been achieved, and so it will print it out.
%rule do_print
%	if result is not 'none'
%	then print_result .

% ------ END OF LOGIC RULES, MAKE THE DAMN THING WORK ------

ruleset assess
	contains all rules ;
	select rule using first come first served ;
	update ruleset by removing each selected rule ;
	initiate by doing restart .

action go
	do invoke ruleset assess
	and print_result .

action print_result
	do nl
	and write('The outcome of the survey is ')
	and write(result)
	and nl
	and write('Reason: ')
	and write(reason)
	and nl .