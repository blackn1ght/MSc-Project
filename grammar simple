------ TOKENS ------

[ \t\n]			; /* Whitespace, ignore */
^%			; /* Comment, ignore */
"."			return TOKEN(TSTOP);
";"			return TOKEN(TQEND);
"^question"		return TOKEN(TQUESTION);
"^rule"			return TOKEN(TRULE);
"^input"		return TOKEN(TINPUT);
"^if"			return TOKEN(TIF);
"and"			return TOKEN(TAND);
"then"			return TOKEN(TTHEN);
"is"			return TOKEN(TIS);
"="			return TOKEN(TEQUALS);
">"			return TOKEN(TMT);
"<"			return TOKEN(TLT);
">="			return TOKEN(TME);
"<="			return TOKEN(TLE);
"becomes"		return TOKEN(TBECOMES);
"do"			return TOKEN(TDO);
"ask"			return TOKEN(TASK);
"("			return TOKEN(TLPAREN);
")"			return TOKEN(TRPAREN);
[0-9]+\.[0-9]*		SAVE_TOKEN; return TDOUBLE;
[0-9]+			SAVE_TOKEN; return TINTEGER;
[a-zA-Z_][a-zA-Z0-9_]*	SAVE_TOKEN; return TIDENTIFIER;
.			printf("Unknown token!\n"); yyterminate();




------ GRAMMAR ------

rule: RULE ident statement_block STOP

question: QUESTION ident question_string QEND question_input STOP
	| QUESTION ident question_string QEND question_input QEND question_reason STOP

question_string: string

question_input: INPUT DTYPE

question_reason: BECOMES string

statement_block: if_statement STOP

if_statement: IF expression [and expression] THEN statement [and statement

expression: ident comparison ident

statement: assignment | 

ask: ASK ident

comparison: TIS | TMT | TLT | TME | TLE | TEQUALS

assignment: ident BECOMES value | ident BECOMES ident

write : 

ident: TIDENTIFIER

numeric : TINTEGER | TDOUBLE
